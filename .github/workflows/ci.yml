name: CI/CD Pipeline

# Trigger the workflow on push to master or main branch
on:
  push:
    branches:
      - master  # Trigger the workflow when a commit is made to the master branch

jobs:
  # Job for building Docker image and pushing it to Docker Hub
  build:
    runs-on: ubuntu-latest  # Run on the latest Ubuntu

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2  # This action will check out the repository code

      # Step 2: Log in to Docker Hub (use GitHub secrets for credentials)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # GitHub Secret for Docker username
          password: ${{ secrets.DOCKER_PASSWORD }}  # GitHub Secret for Docker password

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t yourdockerhubusername/your-service-name:${{ github.sha }} .  # Build image with commit SHA as tag

      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push yourdockerhubusername/your-service-name:${{ github.sha }}  # Push image to Docker Hub

  # Job for deploying to EKS (Blue-Green Deployment)
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Only run the deploy job if the build job is successful

    steps:
      # Step 1: Checkout the code from GitHub again (needed for the deployment job)
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS credentials to allow interaction with AWS services (EKS)
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # GitHub Secret for AWS Access Key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # GitHub Secret for AWS Secret Key
          aws-region: us-west-2  # Specify your AWS region

      # Step 3: Set up kubectl to interact with the EKS cluster
      - name: Set up kubectl
        run: |
          aws eks --region us-west-2 update-kubeconfig --name healthsync-cluster  # Replace with your EKS cluster name

      # Step 4: Deploy to EKS (Blue-Green Deployment)
      - name: Deploy to EKS (Green Environment)
        run: |
          ./green-to-blue.sh  # Run script for Green-to-Blue deployment (Green deployment is applied here)
          
      # Step 5: Optionally, run tests after deployment to ensure it works as expected
      - name: Test Green Environment
        run: |
          curl http://green-patient-record-service/healthcheck  # Replace with your actual health check URL

